# gdb output from delphy's initial run on the ematTest.fasta
(const delphy::Phylo_tree &) @0x5230000030a0: {<delphy::Tree<delphy::Phylo_node, std::allocator>> = {root = 6, 
    nodes = std::vector of length 7, capacity 7 = {
      {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = 4, children = {indices_ = {_M_elems = {-1, -1}}}}, <No data fields>}, 
        name = ">sample1|2019-12-31", t_min = -1, t_max = -1, t = -1, 
        mutations = std::vector of length 2, capacity 2 = {{
            from = delphy::Real_seq_letter::A, site = 2, 
            to = delphy::Real_seq_letter::C, t = -47.998690527716469}, {
            from = delphy::Real_seq_letter::C, site = 1, 
            to = delphy::Real_seq_letter::G, t = -5.1611070803280157}}, 
        missations = {intervals = {intervals_ = {m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                    m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, m_start = 0x0, m_size = 0, 
                      m_capacity = 0}}}, 
                static has_stored_allocator_type = true}}}, from_states = {
            m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}, 
      {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = 4, children = {indices_ = {_M_elems = {-1, -1}}}}, <No data fields>}, 
        name = ">sample2|2019-11-28", t_min = -34, t_max = -34, t = -34, mutations = std::vector of length 1, capacity 1 = {{from = delphy::Real_seq_letter::C, 
            site = 1, to = delphy::Real_seq_letter::G, t = -36.913161628586991}}, missations = {intervals = {intervals_ = {m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                    m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}, from_states = {m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}, 
      {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = 5, children = {indices_ = {_M_elems = {-1, -1}}}}, <No data fields>}, 
        name = ">sample3|2019-12-28", t_min = -4, t_max = -4, t = -4, mutations = std::vector of length 0, capacity 0, missations = {intervals = {intervals_ = {
              m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                    m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}, from_states = {m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}, 
      {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = 6, children = {indices_ = {_M_elems = {-1, -1}}}}, <No data fields>}, 
        name = ">sample4|2019-12-30", t_min = -2, t_max = -2, t = -2, mutations = std::vector of length 1, capacity 1 = {{from = delphy::Real_seq_letter::A, site = 2, to = delphy::Real_seq_letter::G, t = -39.840408597973386}}, missations = {
          intervals = {intervals_ = {m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, 
                      m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}, from_states = {m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, 
                    m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}, {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = 5, children = {indices_ = {_M_elems = {0, 
                  1}}}}, <No data fields>}, name = "", t_min = -3.40282347e+38, t_max = 3.40282347e+38, t = -48.467903755611424, mutations = std::vector of length 0, capacity 0, missations = {intervals = {intervals_ = {m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, 
                      m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}, from_states = {m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, 
                    m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}, {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = 6, children = {indices_ = {_M_elems = {2, 
                  4}}}}, <No data fields>}, name = "", t_min = -3.40282347e+38, t_max = 3.40282347e+38, t = -49.147026742181303, mutations = std::vector of length 0, capacity 0, missations = {intervals = {intervals_ = {m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, 
                      m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}, from_states = {m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, 
                    m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}, {<delphy::Binary_node> = {<delphy::Node<delphy::Binary_child_indices>> = {parent = -1, children = {indices_ = {_M_elems = {3, 
                  5}}}}, <No data fields>}, name = "", t_min = -3.40282347e+38, t_max = 3.40282347e+38, t = -50.29117326075027, mutations = std::vector of length 0, capacity 0, missations = {intervals = {intervals_ = {m_flat_tree = {
                m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, int>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {m_holder = {<std::allocator<boost::container::dtl::pair<int, int> >> = {<std::__new_allocator<boost::container::dtl::pair<int, int> >> = {<No data fields>}, <No data fields>}, 
                      m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}, from_states = {m_flat_tree = {
              m_data = {<boost::container::dtl::flat_tree_value_compare<std::less<int>, boost::container::dtl::pair<int, delphy::Real_seq_letter>, boost::container::dtl::select1st<int> >> = {<std::less<int>> = {<std::binary_function<int, int, bool>> = {<No data fields>}, <No data fields>}, <No data fields>}, m_seq = {
                  m_holder = {<std::allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<std::__new_allocator<boost::container::dtl::pair<int, delphy::Real_seq_letter> >> = {<No data fields>}, <No data fields>}, 
                    m_start = 0x0, m_size = 0, m_capacity = 0}}}, static has_stored_allocator_type = true}}}}}}, ref_sequence = std::vector of length 3, capacity 3 = {delphy::Real_seq_letter::T, delphy::Real_seq_letter::C, 
    delphy::Real_seq_letter::A}}